import React, { useEffect, useState } from 'react';
import Listdish from '../../components/ListFood';
import { useParams } from 'react-router-dom';
import dishApi from '../../api/dishApi';
import evaluateDishApi from '../../api/evaluateDishApi';
import { toast } from 'react-toastify';

import ListReview from '../../components/ListReview';
import Evaluate from '../../components/Evaluate';
import Swal from 'sweetalert2';


const topDishes = [
  {
    id: 1,
    name: 'B√∫n ch·∫£ H√† N·ªôi',
    rating: 4.7,
    image: '/images/buncha.jpg',
    restaurantName: 'Nh√† h√†ng H√† N·ªôi Qu√°n',
    restaurantId: 101,
    description: 'Th·ªãt n∆∞·ªõng ƒë·∫≠m v·ªã, n∆∞·ªõc ch·∫•m chua ng·ªçt h√†i ho√†.',
  },
  {
    id: 2,
    name: 'Ph·ªü b√≤ truy·ªÅn th·ªëng',
    rating: 4.6,
    image: '/images/pho.jpg',
    restaurantName: 'Ph·ªü S∆∞·ªõng',
    restaurantId: 102,
    description: 'N∆∞·ªõc d√πng ng·ªçt x∆∞∆°ng, th∆°m v·ªã qu·∫ø h·ªìi ƒë·∫∑c tr∆∞ng.',
  },
  // Th√™m c√°c m√≥n kh√°c n·∫øu c·∫ßn
];

const DishDetails = () => {
  const {id} = useParams();
  const [dish, setDish] = useState({})
  const [dishes, setDishes] = useState([])
  const [reviews, setReviews] = useState([])
  const [comment, setComment] = useState('')

  const handleSendReview = () => {
    if (comment.trim() === '') return;

    try {
        const response = true; // test true / false
    
        if (response === true) {
          Swal.fire({
            icon: 'success',
            title: 'üéâ C·∫£m ∆°n b·∫°n r·∫•t nhi·ªÅu!',
            text: 'Ch√∫ng t√¥i r·∫•t vui khi nh·∫≠n ƒë∆∞·ª£c ƒë√°nh gi√° t√≠ch c·ª±c t·ª´ b·∫°n. Ph·∫£n h·ªìi c·ªßa b·∫°n l√† ngu·ªìn ƒë·ªông l·ª±c l·ªõn ƒë·ªÉ ch√∫ng t√¥i kh√¥ng ng·ª´ng n√¢ng cao ch·∫•t l∆∞·ª£ng d·ªãch v·ª•!',
            confirmButtonText: 'ƒê√≥ng',
            confirmButtonColor: '#3085d6',
          });
        } else {
          Swal.fire({
            icon: 'info',
            title: 'üôè C·∫£m ∆°n b·∫°n ƒë√£ g√≥p √Ω!',
            text: 'Ch√∫ng t√¥i xin ghi nh·∫≠n nh·ªØng ph·∫£n h·ªìi ch√¢n th√†nh t·ª´ b·∫°n. ƒê·ªôi ng≈© c·ªßa ch√∫ng t√¥i s·∫Ω xem x√©t v√† c·∫£i thi·ªán d·ªãch v·ª• trong th·ªùi gian t·ªõi!',
            confirmButtonText: 'ƒê√≥ng',
            confirmButtonColor: '#3085d6',
          });
        }
    
      } catch (error) {
        toast.error('C√≥ l·ªói x·∫£y ra khi g·ª≠i ƒë√°nh gi√°. Vui l√≤ng th·ª≠ l·∫°i sau.');
        console.error('Chi ti·∫øt l·ªói:', error);
      }
    setComment('');
  };

  useEffect(()=>{
    const fetchData = async () => {
      try {
        const response = await dishApi.getDishById(id);
        const responseReviews = await evaluateDishApi.getEvaluateByDishId(id)
        setDish(response)
        setReviews(responseReviews)
      } catch (error) {
        toast.error(error.message)
      }
    }

    fetchData();
  },[id])

  return (
    <div className="px-32 pt-5 pb-10">
      <div className='flex justify-between gap-5'>
        <img src={dish.ImageUrl} alt={dish.Name} className="w-[40%] h-60 object-cover rounded" />
        <div className='w-[45%]'>
            <div className='flex gap-3 items-center mb-5'>
                <h1 className="text-2xl font-medium">{dish.Name}</h1>
                <p className="text-yellow-500">‚≠ê {4.5} ({dish.GoodReviews + dish.BadReviews} ƒë√°nh gi√°)</p>
            </div>
            <p className="text-gray-700 mb-2">{dish.Desc}</p>
            <p><strong>Danh m·ª•c:</strong> {dish.TypeDishName}</p>
            <p><strong>Gi√°:</strong> {new Intl.NumberFormat('vi-VN', { style: 'currency', currency: 'VND' }).format(dish.Price)}</p>
        </div>
      </div>

      <hr className="my-6" />

      <h2 className="text-xl font-semibold mb-2">üí¨ B√¨nh lu·∫≠n</h2>
      <ListReview reviews={reviews} />
      <Evaluate comment={comment} setComment={setComment} handleSendReview={handleSendReview} />
      <hr className="my-6" />

      <h2 className="text-xl font-semibold mb-2">üçΩ G·ª£i √Ω m√≥n kh√°c</h2>
      <Listdish dishes={topDishes}/>
    </div>
  );
};

export default DishDetails;
