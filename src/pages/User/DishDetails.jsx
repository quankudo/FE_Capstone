import React, { useEffect, useState } from 'react';
import Listdish from '@/components/ListFood';
import { useParams } from 'react-router-dom';
import dishApi from '@/api/dishApi';
import evaluateDishApi from '@/api/evaluateDishApi';
import { toast } from 'react-toastify';

import ListReview from '@/components/ListReview';
import Evaluate from '@/components/Evaluate';
import Swal from 'sweetalert2';
import Loading from '@/components/Loading';
import { useSelector } from 'react-redux';
import axios from 'axios';
import { FlaskAPI } from '@/constant';


const DishDetails = () => {
  const {id} = useParams();
  const {user, isAuthenticated} = useSelector(state => state.auth)
  const [dish, setDish] = useState({})
  const [dishes, setDishes] = useState([])
  const [reviews, setReviews] = useState([])
  const [comment, setComment] = useState('')
  const [loading, setLoading] = useState('')

  const handleSendReview = async() => {
    if (comment.trim() === '') return;

    setLoading(true)
    try {

      const aiRes = await axios.post(FlaskAPI, {
        review: comment
      });

      const isPositive = aiRes.data.label === 'Positive';

      const comments = {
        Id: id,
        IdUser: user.id,
        Comment: comment,
        TypeReview: isPositive,
      };
      
      await evaluateDishApi.AddEvaluate(comments);
      const response = await dishApi.getDishById(id)
      const responseReview = await evaluateDishApi.getEvaluateByDishId(id)
      setReviews(responseReview)
      setDish(response)
      // 3. Show th√¥ng b√°o
      Swal.fire({
        icon: isPositive ? 'success' : 'info',
        title: isPositive ? 'üéâ C·∫£m ∆°n b·∫°n r·∫•t nhi·ªÅu!' : 'üôè C·∫£m ∆°n b·∫°n ƒë√£ g√≥p √Ω!',
        text: isPositive
          ? 'Ch√∫ng t√¥i r·∫•t vui khi nh·∫≠n ƒë∆∞·ª£c ƒë√°nh gi√° t√≠ch c·ª±c t·ª´ b·∫°n. Ph·∫£n h·ªìi c·ªßa b·∫°n l√† ngu·ªìn ƒë·ªông l·ª±c l·ªõn ƒë·ªÉ ch√∫ng t√¥i kh√¥ng ng·ª´ng n√¢ng cao ch·∫•t l∆∞·ª£ng d·ªãch v·ª•!'
          : 'Ch√∫ng t√¥i xin ghi nh·∫≠n nh·ªØng ph·∫£n h·ªìi ch√¢n th√†nh t·ª´ b·∫°n. ƒê·ªôi ng≈© c·ªßa ch√∫ng t√¥i s·∫Ω xem x√©t v√† c·∫£i thi·ªán d·ªãch v·ª• trong th·ªùi gian t·ªõi!',
        confirmButtonText: 'ƒê√≥ng',
        confirmButtonColor: '#3085d6',
      });
  
    } catch (error) {
      toast.error('C√≥ l·ªói x·∫£y ra khi g·ª≠i ƒë√°nh gi√°. Vui l√≤ng th·ª≠ l·∫°i sau.');
      console.error('Chi ti·∫øt l·ªói:', error);
    }
    finally {
      setLoading(false)
      setComment('');
    }
  };

  useEffect(()=>{
    setLoading(true)
    const fetchData = async () => {
      try {
        const response = await dishApi.getDishById(id);
        const responseReviews = await evaluateDishApi.getEvaluateByDishId(id)
        const responseDishes = await dishApi.getSuggestDishes();
        setDishes(responseDishes)
        setDish(response)
        setReviews(responseReviews)
      } catch (error) {
        toast.error(error.message)
      }
      finally {
        setLoading(false)
      }
    }

    fetchData();
  },[id])

  if(loading)
    return <Loading/>

  return (
    <div className="px-32 pt-5 pb-10">
      <div className='flex justify-between gap-2'>
        <img src={dish.ImageUrl} alt={dish.Name} className="w-[50%] h-72 object-cover rounded" />
        <div className='w-[47%]'>
            <div className='flex gap-3 items-center mb-5'>
                <h1 className="text-2xl font-medium">{dish.Name}</h1>
                <p className="text-yellow-500">‚≠ê {parseFloat(dish.Score).toFixed(1)} ({dish.GoodReviews + dish.BadReviews} ƒë√°nh gi√°)</p>
            </div>
            <p className="text-gray-700 mb-2">{dish.Desc}</p>
            <p><strong>Nh√† h√†ng:</strong> {dish.RestaurantName}</p>
            <p><strong>Danh m·ª•c:</strong> {dish.TypeDishName}</p>
            <p><strong>Gi√°:</strong> {new Intl.NumberFormat('vi-VN', { style: 'currency', currency: 'VND' }).format(dish.Price)}</p>
        </div>
      </div>

      <hr className="my-6" />

      <h2 className="text-xl font-semibold mb-4">üí¨ B√¨nh lu·∫≠n</h2>
      <ListReview reviews={reviews} />
      <Evaluate comment={comment} setComment={setComment} handleSendReview={handleSendReview} />
      <hr className="my-6" />

      <h2 className="text-xl font-semibold mb-4">üçΩ G·ª£i √Ω m√≥n kh√°c</h2>
      <Listdish dishes={dishes}/>
    </div>
  );
};

export default DishDetails;
