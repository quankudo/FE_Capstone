import React, { useEffect, useState } from 'react';
import SectionHeader from '@/components/SectionHeader';
import Swal from 'sweetalert2'
import {toast} from 'react-toastify'
import restaurantApi from '@/api/restaurantApi';
import dishApi from '@/api/dishApi';
import Loading from '@/components/Loading';
import axios from 'axios';
import evaluateDishApi from '@/api/evaluateDishApi';
import evaluateRestaurantApi from '@/api/evaluateRestaurantApi';
import { useSelector } from 'react-redux';
import { FlaskAPI } from '@/constant';

const CallToActionReview = () => {
  const {user, isAuthenticated} = useSelector(state => state.auth)
  const [reviewType, setReviewType] = useState('restaurant');
  const [selectedRestaurant, setSelectedRestaurant] = useState('');
  const [selectedDish, setSelectedDish] = useState('');
  const [reviewText, setReviewText] = useState('');
  const [loading, setLoading] = useState(false)
  const [restaurants, setRestaurants] = useState([]);
  const [dishes, setDishes] = useState([]);

  useEffect(()=>{
    const fetchData = async () => {
      try {
        const response = await restaurantApi.getAllRestaurants();
        setRestaurants(response)
        const responseDishes = await dishApi.getAllDishesByRestId(response[0].Id)
        setDishes(responseDishes)
      } catch (error) {
        console.log(error);
        toast.error(error.message)
      }
    }

    fetchData();
  },[])

  const handleChangeSelectRestaurant = async (e) => {
    const id = e.target.value;
    setSelectedRestaurant(id);
    setSelectedDish('');
    try {
      const responseDishes = await dishApi.getAllDishesByRestId(id)
      setDishes(responseDishes)
    } catch (error) {
      toast.error(error.message)
    }
  }

  const handleSubmit = async () => {
    if (!reviewText.trim()) {
      toast.warning("Vui l√≤ng nh·∫≠p n·ªôi dung ƒë√°nh gi√°!");
      return;
    }

    setLoading(true);
    try {
      // 1. G·ªçi AI model
      const aiRes = await axios.post(FlaskAPI, {
        review: reviewText
      });

      const isPositive = aiRes.data.label === 'Positive';
      // const isPositive = true;

      // 2. Chu·∫©n b·ªã comment object
      const comment = {
        IdUser: user.id,
        Comment: reviewText,
        TypeReview: isPositive,
      };

      if (reviewType === 'restaurant') {
        comment.Id = selectedRestaurant;
        await evaluateRestaurantApi.AddEvaluate(comment);
      } else {
        comment.Id = selectedDish;
        await evaluateDishApi.AddEvaluate(comment);
      }

      // 3. Show th√¥ng b√°o
      Swal.fire({
        icon: isPositive ? 'success' : 'info',
        title: isPositive ? 'üéâ C·∫£m ∆°n b·∫°n r·∫•t nhi·ªÅu!' : 'üôè C·∫£m ∆°n b·∫°n ƒë√£ g√≥p √Ω!',
        text: isPositive
          ? 'Ch√∫ng t√¥i r·∫•t vui khi nh·∫≠n ƒë∆∞·ª£c ƒë√°nh gi√° t√≠ch c·ª±c t·ª´ b·∫°n. Ph·∫£n h·ªìi c·ªßa b·∫°n l√† ngu·ªìn ƒë·ªông l·ª±c l·ªõn ƒë·ªÉ ch√∫ng t√¥i kh√¥ng ng·ª´ng n√¢ng cao ch·∫•t l∆∞·ª£ng d·ªãch v·ª•!'
          : 'Ch√∫ng t√¥i xin ghi nh·∫≠n nh·ªØng ph·∫£n h·ªìi ch√¢n th√†nh t·ª´ b·∫°n. ƒê·ªôi ng≈© c·ªßa ch√∫ng t√¥i s·∫Ω xem x√©t v√† c·∫£i thi·ªán d·ªãch v·ª• trong th·ªùi gian t·ªõi!',
        confirmButtonText: 'ƒê√≥ng',
        confirmButtonColor: '#3085d6',
      });

    } catch (error) {
      toast.error('C√≥ l·ªói x·∫£y ra khi g·ª≠i ƒë√°nh gi√°. Vui l√≤ng th·ª≠ l·∫°i sau.');
      console.error('Chi ti·∫øt l·ªói:', error);
    } finally {
      setReviewText('')
      setSelectedDish('')
      setSelectedRestaurant('')
      setLoading(false);
    }
  };

  if(loading)
    return <Loading />

  return (
    <div className='px-32 pt-5'>
      <SectionHeader title={"G·ª≠i ƒë√°nh gi√° c·ªßa b·∫°n"} subTitle={"Chia s·∫ª c·∫£m nh·∫≠n v·ªÅ m√≥n ƒÉn ho·∫∑c nh√† h√†ng b·∫°n ƒë√£ tr·∫£i nghi·ªám"}/>
    <div className="bg-white rounded-2xl shadow-xl p-6 max-w-2xl mx-auto my-10 border border-red-100">
      
      <h2 className="text-2xl font-bold text-center text-red-600 mb-6">
        ‚ù§Ô∏è B·∫°n v·ª´a ƒÉn m·ªôt b·ªØa tuy·ªát v·ªùi? H√£y chia s·∫ª c·∫£m nh·∫≠n!
      </h2>

      {/* Tab ch·ªçn lo·∫°i ƒë√°nh gi√° */}
      <div className="flex justify-center gap-4 mb-6">
        <button
          className={`px-5 py-2 rounded-full font-medium transition ${
            reviewType === 'restaurant'
              ? 'bg-red-500 text-white shadow'
              : 'bg-gray-100 text-gray-600 hover:bg-gray-200'
          }`}
          onClick={() => setReviewType('restaurant')}
        >
          ƒê√°nh gi√° nh√† h√†ng
        </button>
        <button
          className={`px-5 py-2 rounded-full font-medium transition ${
            reviewType === 'dish'
              ? 'bg-red-500 text-white shadow'
              : 'bg-gray-100 text-gray-600 hover:bg-gray-200'
          }`}
          onClick={() => setReviewType('dish')}
        >
          ƒê√°nh gi√° m√≥n ƒÉn
        </button>
      </div>

      {/* Ch·ªçn nh√† h√†ng */}
      <div className="mb-4">
        <label className="block mb-1 font-semibold text-gray-700">Nh√† h√†ng</label>
        <select
          className="w-full border border-gray-300 rounded-lg px-4 py-2 focus:outline-none focus:ring-2 focus:ring-red-400"
          value={selectedRestaurant}
          onChange={(e) => handleChangeSelectRestaurant(e)}
        >
          <option value="">-- Ch·ªçn nh√† h√†ng --</option>
          {restaurants.map((r) => (
            <option key={r.Id} value={r.Id}>
              {r.Name}
            </option>
          ))}
        </select>
      </div>

      {/* Ch·ªçn m√≥n ƒÉn n·∫øu c·∫ßn */}
      {reviewType === 'dish' && selectedRestaurant && (
        <div className="mb-4">
          <label className="block mb-1 font-semibold text-gray-700">M√≥n ƒÉn</label>
          <select
            className="w-full border border-gray-300 rounded-lg px-4 py-2 focus:outline-none focus:ring-2 focus:ring-red-400"
            value={selectedDish}
            onChange={(e) => setSelectedDish(e.target.value)}
          >
            <option value="">-- Ch·ªçn m√≥n ƒÉn --</option>
            {dishes.map((dish, i) => (
              <option key={i} value={dish.Id}>
                {dish.Name}
              </option>
            ))}
          </select>
        </div>
      )}

      {/* N·ªôi dung ƒë√°nh gi√° */}
      <div className="mb-6">
        <label className="block mb-1 font-semibold text-gray-700">N·ªôi dung ƒë√°nh gi√°</label>
        <textarea
          className="w-full border border-gray-300 rounded-lg px-4 py-2 resize-none focus:outline-none focus:ring-2 focus:ring-red-400"
          placeholder="H√£y chia s·∫ª tr·∫£i nghi·ªám c·ªßa b·∫°n..."
          rows={4}
          value={reviewText}
          onChange={(e) => setReviewText(e.target.value)}
        ></textarea>
      </div>

      {/* N√∫t g·ª≠i */}
      <div className="text-center">
        <button
          onClick={handleSubmit}
          className="px-6 py-2 bg-red-500 hover:bg-red-600 text-white rounded-full font-medium shadow-md transition"
        >
          G·ª≠i ƒë√°nh gi√°
        </button>
      </div>
    </div>
    </div>
  );
};

export default CallToActionReview;
